## Problem:
Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.

 

Example 1:

Input: s = "eleetminicoworoep"
Output: 13
Explanation: The longest substring is "leetminicowor" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.
Example 2:

Input: s = "leetcodeisgreat"
Output: 5
Explanation: The longest substring is "leetc" which contains two e's.
Example 3:

Input: s = "bcbcbc"
Output: 6
Explanation: In this case, the given string "bcbcbc" is the longest because all vowels: a, e, i, o and u appear zero times.
 

Constraints:

1 <= s.length <= 5 x 10^5
s contains only lowercase English letters.

## Solution:
class Solution {
    public int findTheLongestSubstring(String s) {
        Map<Character, Integer> vowelToBit = new HashMap<>();
        vowelToBit.put('a', 1 << 0);
        vowelToBit.put('e', 1 << 1);
        vowelToBit.put('i', 1 << 2);
        vowelToBit.put('o', 1 << 3);
        vowelToBit.put('u', 1 << 4);
        
        // Map to store first occurrence of each bitmask
        Map<Integer, Integer> maskIndexMap = new HashMap<>();
        // Initialize mask 0 at index -1
        maskIndexMap.put(0, -1);
        
        int maxLength = 0;
        int mask = 0;
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // Update the mask for the current vowel
            if (vowelToBit.containsKey(c)) {
                mask ^= vowelToBit.get(c);
            }
            // Check if this mask has been seen before
            if (maskIndexMap.containsKey(mask)) {
                maxLength = Math.max(maxLength, i - maskIndexMap.get(mask));
            } else {
                maskIndexMap.put(mask, i);
            }
        }
        
        return maxLength;
    }
}
