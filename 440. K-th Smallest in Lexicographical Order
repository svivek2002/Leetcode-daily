## Problem:
Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

 

Example 1:

Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
Example 2:

Input: n = 1, k = 1
Output: 1
 

Constraints:

1 <= k <= n <= 10^9

## Solution:
class Solution {
    public int findKthNumber(int n, int k) {
        int current = 1; // Start with the smallest prefix
        k--; // Decrement k because we start counting from the first number
        
        while (k > 0) {
            int count = countNumbersInRange(current, n);
            if (count <= k) {
                // Move to the next prefix
                current++;
                k -= count;
            } else {
                // Move to the next level (add a digit to the current prefix)
                current *= 10;
                k--;
            }
        }
        return current;
    }

    // Function to count how many numbers are there between two prefixes in the range [1, n]
    private int countNumbersInRange(int prefix, int n) {
        long current = prefix;
        long next = prefix + 1;
        int count = 0;
        
        // Count the numbers between current and next prefix
        while (current <= n) {
            count += Math.min(n + 1, next) - current;
            current *= 10;
            next *= 10;
        }
        
        return count;
    }
}
