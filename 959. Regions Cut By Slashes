## Problem:
An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.

Given the grid grid represented as a string array, return the number of regions.

Note that backslash characters are escaped, so a '\' is represented as '\\'.

 

Example 1:


Input: grid = [" /","/ "]
Output: 2
Example 2:


Input: grid = [" /","  "]
Output: 1
Example 3:


Input: grid = ["/\\","\\/"]
Output: 5
Explanation: Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.
 

Constraints:

n == grid.length == grid[i].length
1 <= n <= 30
grid[i][j] is either '/', '\', or ' '.

## Solution:
class Solution {
    public int regionsBySlashes(String[] grid) {
       int n = grid.length;
        int size = 4 * n * n;  // Each cell is divided into 4 parts
        UnionFind uf = new UnionFind(size);
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int root = 4 * (i * n + j);
                char val = grid[i].charAt(j);
                
                if (val == '/') {
                    uf.union(root, root + 3); // 0-3
                    uf.union(root + 1, root + 2); // 1-2
                } else if (val == '\\') {
                    uf.union(root, root + 1); // 0-1
                    uf.union(root + 2, root + 3); // 2-3
                } else {
                    uf.union(root, root + 1); // 0-1
                    uf.union(root + 1, root + 2); // 1-2
                    uf.union(root + 2, root + 3); // 2-3
                }
                
                // Union with neighboring cells
                // Right neighbor
                if (j + 1 < n) {
                    uf.union(root + 1, 4 * (i * n + j + 1) + 3);
                }
                // Bottom neighbor
                if (i + 1 < n) {
                    uf.union(root + 2, 4 * ((i + 1) * n + j));
                }
            }
        }
        
        return uf.count();
    }
}

class UnionFind {
    int[] parent;
    int count;
    
    public UnionFind(int n) {
        parent = new int[n];
        count = n;
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    public int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    public void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            parent[rootX] = rootY;
            count--;
        }
    }
    
    public int count() {
        return count;
    }
}
