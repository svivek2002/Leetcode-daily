## Problem:
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

Example 2:
Input: nums = [5], k = 9
Output: 0
 
Constraints:
1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104

## Solution:
# Brute-force:
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int cnt = 0;
        int n = nums.length;
        for(int i = 0; i < n; i++){
            int sum = 0;
            for(int j = i; j < n; j++){
                sum += nums[j];
                if(sum % k == 0) cnt++;
            }
        }
        return cnt;
    }
}
// But this gives TLE as it is taking nearly O(N^2) complexity.

# Optimal Solution:
// Using concept of prefixSum, and taking hashMap to store its count;
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        int cnt = 0, preSum = 0;
        for(int num : nums){
            preSum += num;
            int mod = preSum % k;
            if (mod < 0) {
                mod += k;
            }
            cnt += map.getOrDefault(mod, 0);
            map.put(mod, map.getOrDefault(mod,0) + 1); 
        }
        return cnt;
    }
}
