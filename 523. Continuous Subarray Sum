##  Problem:
Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.
A good subarray is a subarray where:
its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:
A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

Example 1:
Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.

Example 2:
Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.

Example 3:
Input: nums = [23,2,6,4,7], k = 13
Output: false

Constraints:
1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1

## Solution:
* failed:
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int n = nums.length;
        int sum = 0, size = 0;
        for(int i = 0; i < n; i++){
            if((i+1) < n && nums[i] == 0 && nums[i+1] == 0) return true;
            sum += nums[i];
            size++;
            if(sum % k == 0 && size > 1) return true;
        }
        return false;
    }
} // --> It doesn't slide the window to check other subarrays possibilities

* passed:
import java.util.HashMap;

public class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        // Edge case: if the array length is less than 2, it can't have a subarray of length at least 2
        if (nums.length < 2) {
            return false;
        }
        // HashMap to store the first occurrence of each prefix sum modulo k
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1); // Initialize with 0 at index -1 to handle subarray from the start

        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            int mod = sum % k;
            // Adjust mod to be positive
            if (mod < 0) {
                mod += k;
            }
            // If this mod has been seen before, check the length of the subarray
            if (map.containsKey(mod)) {
                if (i - map.get(mod) > 1) {
                    return true;
                }
            } else {
                // Store the first occurrence of this mod
                map.put(mod, i);
            }
        }
        return false;
    }
}
