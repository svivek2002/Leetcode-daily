## Problem:
Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.

The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.

The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.

Return an array of the k parts.

 

Example 1:


Input: head = [1,2,3], k = 5
Output: [[1],[2],[3],[],[]]
Explanation:
The first element output[0] has output[0].val = 1, output[0].next = null.
The last element output[4] is null, but its string representation as a ListNode is [].
Example 2:


Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3
Output: [[1,2,3,4],[5,6,7],[8,9,10]]
Explanation:
The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.
 

Constraints:

The number of nodes in the list is in the range [0, 1000].
0 <= Node.val <= 1000
1 <= k <= 50

## Solution:
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode[] parts = new ListNode[k];
        int length = 0;
        ListNode current = head;
        
        // Step 1: Calculate the total length of the linked list
        while (current != null) {
            length++;
            current = current.next;
        }
        
        // Step 2: Determine the base size of each part and the number of parts with an extra node
        int baseSize = length / k;
        int extraNodes = length % k;
        
        // Step 3: Split the list into k parts
        current = head;
        for (int i = 0; i < k; i++) {
            ListNode partHead = current;
            ListNode prev = null;
            
            // Determine the size of the current part
            int partSize = baseSize + (i < extraNodes ? 1 : 0);
            
            // Move the current pointer to the end of this part
            for (int j = 0; j < partSize; j++) {
                prev = current;
                if (current != null) {
                    current = current.next;
                }
            }
            
            // Cut the current part from the rest of the list
            if (prev != null) {
                prev.next = null;
            }
            
            // Add the head of this part to the result
            parts[i] = partHead;
        }
        
        return parts;
    }
}

