## Problem:
A swap is defined as taking two distinct positions in an array and swapping the values in them.

A circular array is defined as an array where we consider the first element and the last element to be adjacent.

Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

 

Example 1:

Input: nums = [0,1,0,1,1,0,0]
Output: 1
Explanation: Here are a few of the ways to group all the 1's together:
[0,0,1,1,1,0,0] using 1 swap.
[0,1,1,1,0,0,0] using 1 swap.
[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).
There is no way to group all 1's together with 0 swaps.
Thus, the minimum number of swaps required is 1.
Example 2:

Input: nums = [0,1,1,1,0,0,1,1,0]
Output: 2
Explanation: Here are a few of the ways to group all the 1's together:
[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).
[1,1,1,1,1,0,0,0,0] using 2 swaps.
There is no way to group all 1's together with 0 or 1 swaps.
Thus, the minimum number of swaps required is 2.
Example 3:

Input: nums = [1,1,0,0,1]
Output: 0
Explanation: All the 1's are already grouped together due to the circular property of the array.
Thus, the minimum number of swaps required is 0.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

## Solution:
class Solution {
    public int minSwaps(int[] nums) {
        int n = nums.length;

        // Step 1: Count the total number of 1's
        int count1 = 0;
        for (int num : nums) {
            if (num == 1) {
                count1++;
            }
        }

        // If there are no 1's or the array consists entirely of 1's, no swaps are needed.
        if (count1 == 0 || count1 == n) {
            return 0;
        }

        // Step 2: Calculate the minimum number of swaps using a sliding window
        int minSwaps = Integer.MAX_VALUE;
        int current1Count = 0;

        // Step 3: Slide the window across the extended array
        for (int i = 0; i < 2 * n; i++) {
            if (nums[i % n] == 1) {
                current1Count++;
            }

            if (i >= count1) {
                if (nums[(i - count1) % n] == 1) {
                    current1Count--;
                }
            }

            // Calculate the minimum swaps needed for the current window
            if (i >= count1 - 1) {
                minSwaps = Math.min(minSwaps, count1 - current1Count);
            }
        }

        return minSwaps;
    }
}
