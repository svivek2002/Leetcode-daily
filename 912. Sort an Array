## Problem:
Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.
 

Constraints:

1 <= nums.length <= 5 * 10^4
-5 * 104 <= nums[i] <= 5 * 10^4

## Solution:
class Solution {
    public int[] sortArray(int[] nums) {
        mergeSort(nums, 0, nums.length);
        return nums;
    }
    private void mergeSort(int[] nums, int start, int end){
        if(end - start == 1) return;
        int mid = start + (end - start)/2;
        mergeSort(nums, start, mid);
        mergeSort(nums, mid, end);
        mergeSortedArrays(nums, start, mid, end);
    }
    private void mergeSortedArrays(int[] nums, int left, int mid, int right){
        int[] mix = new int[right - left];

        int i = left;
        int j = mid;
        int k = 0;
        while(i < mid && j < right){
            if(nums[i] < nums[j]){
                mix[k] = nums[i++];
            }
            else{
                mix[k] = nums[j++];
            }
            k++;
        }
        while(i < mid){
            mix[k++] = nums[i++];
        }
        while(j < right){
            mix[k++] = nums[j++];
        }
        for(int l = 0; l < mix.length; l++){
            nums[left+l] = mix[l];
        }
    }
}
