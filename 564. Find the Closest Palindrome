## Problem:
Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.

 

Example 1:

Input: n = "123"
Output: "121"
Example 2:

Input: n = "1"
Output: "0"
Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.
 

Constraints:

1 <= n.length <= 18
n consists of only digits.
n does not have leading zeros.
n is representing an integer in the range [1, 1018 - 1].

## Solution:
class Solution {
    public String nearestPalindromic(String n) {
        int len = n.length();
        long num = Long.parseLong(n);
        Set<Long> candidates = new HashSet<>();
        
        // Edge cases
        candidates.add((long)Math.pow(10, len) + 1); // 100...001
        candidates.add((long)Math.pow(10, len - 1) - 1); // 999...999

        // Get the first half of the string and its variations
        long prefix = Long.parseLong(n.substring(0, (len + 1) / 2));
        for (long i = -1; i <= 1; i++) {
            StringBuilder sb = new StringBuilder();
            sb.append(prefix + i);
            String firstHalf = sb.toString();
            String palindrome;
            
            // Generate the full palindrome
            if (len % 2 == 0) {
                palindrome = firstHalf + new StringBuilder(firstHalf).reverse().toString();
            } else {
                palindrome = firstHalf + new StringBuilder(firstHalf.substring(0, firstHalf.length() - 1)).reverse().toString();
            }
            
            candidates.add(Long.parseLong(palindrome));
        }

        candidates.remove(num); // remove the original number
        
        // Find the closest palindrome
        long closest = -1;
        for (long candidate : candidates) {
            if (closest == -1 || Math.abs(candidate - num) < Math.abs(closest - num) ||
                (Math.abs(candidate - num) == Math.abs(closest - num) && candidate < closest)) {
                closest = candidate;
            }
        }
        
        return String.valueOf(closest);
    }
}
