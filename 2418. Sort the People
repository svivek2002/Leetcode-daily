## Problem:
You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.
For each index i, names[i] and heights[i] denote the name and height of the ith person.
Return names sorted in descending order by the people's heights.

Example 1:
Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.

Example 2:
Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.

Constraints:
n == names.length == heights.length
1 <= n <= 103
1 <= names[i].length <= 20
1 <= heights[i] <= 105
names[i] consists of lower and upper case English letters.
All the values of heights are distinct.

## Solution:
## Brute Force:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        int n = names.length;
        for(int i = 0; i < n - 1; i++){
            int maxIndex = i;
            for(int j = i + 1; j < n; j++){
                if(heights[j] > heights[maxIndex]){
                    maxIndex = j;
                }
            }
            int temp = heights[i];
            heights[i] = heights[maxIndex];
            heights[maxIndex] = temp;

            String str = names[i];
            names[i] = names[maxIndex];
            names[maxIndex] = str;
        }
        return names;
    }
}

## Optimized:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        int n = names.length;
        Integer[] indices = new Integer[n];
        
        // Create a list of indices
        for (int i = 0; i < n; i++) {
            indices[i] = i;
        }
        
        // Sort indices based on the corresponding heights in descending order
        Arrays.sort(indices, (a, b) -> heights[b] - heights[a]);
        
        // Create a result array for sorted names
        String[] sortedNames = new String[n];
        for (int i = 0; i < n; i++) {
            sortedNames[i] = names[indices[i]];
        }
        
        return sortedNames;
    }
}

## Using HASHMAP:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        int n = names.length;
        Map<Integer, String> heightToNameMap = new HashMap<>();
        
        // Map each height to its corresponding name
        for (int i = 0; i < n; i++) {
            heightToNameMap.put(heights[i], names[i]);
        }
        
        // Sort the heights in descending order
        Arrays.sort(heights);
        int[] sortedHeights = new int[n];
        for (int i = 0; i < n; i++) {
            sortedHeights[i] = heights[n - 1 - i];
        }
        
        // Retrieve names using the sorted heights
        String[] sortedNames = new String[n];
        for (int i = 0; i < n; i++) {
            sortedNames[i] = heightToNameMap.get(sortedHeights[i]);
        }
        
        return sortedNames;
    }
}
